package GlobalNavigation;

import java.awt.geom.*;
import java.io.*;
import java.util.*;
import java.text.*;
import java.awt.Color;

import org.ros.message.lab5_msgs.*;
import org.ros.message.lab6_msgs.*;
import org.ros.message.rss_msgs.*;
import org.ros.node.Node;
import org.ros.node.NodeMain;
import org.ros.node.parameter.*;
import org.ros.node.topic.Publisher;
import org.ros.node.topic.Subscriber;
import org.ros.namespace.GraphName;

import VisualServo.*;
import LocalNavigation.*;

public class GlobalNavigation implements NodeMain {
    
    public String myMapFileName=null; //if name is null, pmap can dwi;
    //                            default is: global-nav-maze-2-011-basic.map
    
    //CONSTANTs and other class-specific things
    protected PolygonMap myMap;
    public static final java.lang.String APPNAME="GlobalNavigation";

    //publishers
    //GlobalNavigation needs its own publishers, for messages independent of 
    //   PolygonMap
    private Publisher<Object> erasePub;
    private Publisher<Object> rectPub;
    private Publisher<Object> polyPub;
    private Publisher<Object> pointPub;

    //constructor
    public GlobalNavigation() {
    }
    
    /**
     * Entry hook for ROS when called as stand-alone node. 
     * Similar to PolygonMap'/s onStart().
     */
    @Override
    public void onStart(Node node) {
	ParameterTree paramTree = node.newParameterTree();
	myMapFileName = paramTree.getString(node.resolveName("~/mapFileName"));
	//instantiate publishers
	erasePub = node.newPublisher("/gui/Erase", "lab5_msgs/GUIEraseMsg");
	pointPub = node.newPublisher("/gui/Point", "lab5_msgs/GUIPointMsg");
	rectPub = node.newPublisher("/gui/Rect", "lab6_msgs/GUIRectMsg");
	polyPub = node.newPublisher("/gui/Poly", "lab6_msgs/GUIPolyMsg");
	
	this.instanceMain();
    }
    
    public void displayMap() {
	//assume Polygonmap has already been instantiated
	//fill in world rectangle, points (start, goal), and polygons (obstacles) 
	erasePub.publish(new GUIEraseMsg()); //might cause a problem?
	
	//world rectangle
	GUIRectMsg worldRectMsg = new GUIRectMsg(); //BLUE
	this.fillRectMsg(worldRectMsg, myMap.getWorldRect(), Color.BLUE, false);//unfilled
	rectPub.publish(worldRectMsg);
	
	//robot start position
	GUIPointMsg robotStartMsg = new GUIPointMsg();
	this.fillPointMsg(robotStartMsg, myMap.getRobotStart(), Color.GREEN, 1);//cross
	pointPub.publish(robotStartMsg);

	System.out.println("\n*\n*\n*PRINTING SHI*\n*\n");

	//robot end position
	GUIPointMsg robotGoalMsg = new GUIPointMsg();
	this.fillPointMsg(robotGoalMsg, myMap.getRobotGoal(), Color.RED, 1);//cross
	pointPub.publish(robotGoalMsg);
	    
	//PolygonObstacle obstacles
	GUIPolyMsg robotObstacMsg = new GUIPolyMsg();
	LinkedList<PolygonObstacle> obstacles = (LinkedList) myMap.getObstacles();
	for(int i = 0; i<obstacles.size();i++){
	    this.fillPolyMsg(robotObstacMsg, obstacles.get(i), Color.PINK, true, true);
	    polyPub.publish(robotObstacMsg);
	}

	System.out.println("how many obstacles does displaymap read?" + obstacles.size());
	
    }
    
    @Override
    public void onShutdown(Node node) {
    }
    
    @Override
    public void onShutdownComplete(Node node) {
	
    }
    
    @Override
    public GraphName getDefaultNodeName() {
	return null;//what else is there to do?
    }

    public void fillPointMsg(GUIPointMsg msg, Point2D.Double point, Color color, long shape) {
	//set point message
	msg.x = point.x;
	msg.y = point.y;
	msg.shape = shape;
	

	this.fillColor(msg.color,color);
    }
    
    public void fillSegmentMsg(GUISegmentMsg segmentMsg, Color color, Point2D.Double start, Point2D.Double other) {
	//set segment Message
	segmentMsg.startX = start.x;
	segmentMsg.startY = start.y;
	segmentMsg.endX = other.x;
	segmentMsg.endY = other.y;

	this.fillColor(segmentMsg.color, color);
    }

    public static void fillRectMsg(GUIRectMsg msg, Rectangle2D.Double r, Color c, boolean filled){
	//set rectangle message to be sent; adjust the msg passed in
	msg.x = (float) r.x;
	msg.y = (float) r.y;
	msg.width = (float) r.width;
	msg.height = (float) r.height;
	msg.filled = filled ? 1 : 0;

	fillColor(msg.c,c);//assumed this.
    }

    public static void fillColor(ColorMsg color2, Color color) {
	color2.r=color.getRed();
	color2.g=color.getGreen();
	color2.b=color.getBlue();
    }

    public static void fillPolyMsg(GUIPolyMsg msg, PolygonObstacle obstacle, Color c, boolean filled, boolean closed) {
	fillColor(msg.c,c);//assumed this.
	msg.filled = filled ? 1 :0; //int32?
	LinkedList<Point2D.Double> oVert = (LinkedList) obstacle.getVertices();
	//filling in x, ys of points; might be neater way to do this?
	float[] msgx = new float[oVert.size()];
	float[] msgy = new float[oVert.size()];
	for (int i = 0; i < oVert.size(); i++){
	    Point2D.Double p = oVert.get(i);
	    msgx[i] = (float) p.x;
	    msgy[i] = (float) p.y;
	}//takes O(n)
	msg.x = msgx;
	msg.y = msgy;
	msg.numVertices = oVert.size();
	msg.closed = closed ? 1:0;//1 if closed, 0 o/w
    }

    public void testConvexHull() {
        List<Point2D.Double> points = new ArrayList<Point2D.Double>();
        points.add(new Point2D.Double(3,0));
        points.add(new Point2D.Double(1,1));
        points.add(new Point2D.Double(1,5));
        points.add(new Point2D.Double(4,2));
        points.add(new Point2D.Double(6,10));

        System.out.println("test points: " + points); 

        GUIPointMsg testHullPointMsg = new GUIPointMsg();
        for (Point2D.Double point: points) {
            this.fillPointMsg(testHullPointMsg, point, Color.RED, 1);//cross
            pointPub.publish(testHullPointMsg);
        } 

        PolygonObstacle hull = GeomUtils.convexHull(points);

        GUIPolyMsg testHullMsg = new GUIPolyMsg();
        this.fillPolyMsg(testHullMsg, hull, Color.PINK, true, true);
        System.out.println("publishing hull: " + testHullMsg); 
        polyPub.publish(testHullMsg);
    }

    /**
     * InstanceMain: like a main(). Called in onStart; similar to
     * PolygonMap's instanceMain method. DOES NOT USE PolygonMap's
     * InstanceMain method!! 
     *
     * Roxana wanted to make the main's independent. They should
     * run similarly.
     */
    public void instanceMain() {
	System.out.println("**map file**: " + myMapFileName);
	//no thread.sleep atm
	try {
	    //set PolygonMap

	    myMap = new PolygonMap(new File(myMapFileName));
	    Thread.sleep(1000);
	    this.displayMap();
	} catch(IOException ioe) {
	    ioe.printStackTrace();
	} catch(ParseException pe) {
	    pe.printStackTrace();
	} catch(InterruptedException ie) {
	    ie.printStackTrace();
	}

    }

    /**
     * Currently empty. Handle's Bump messages
     */
    public void handle(BumpMsg msg) {
	
    }

    /**
     * Currently empty. Handles Odometry messages
     */
    public void handle(OdometryMsg msg){
    }
}
